import os
import time
import datetime
import logging
import asyncio
import random
from flask import Flask
from threading import Thread
import httpx
import xml.etree.ElementTree as ET
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from bs4 import BeautifulSoup
from collections import defaultdict, deque

# üß† –ü–∞–º—è—Ç—å —Å–µ—Å—Å–∏–π
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è defaultdict —Å deque –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_sessions = defaultdict(lambda: deque(maxlen=10))  # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
last_interaction = {}  # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

# ü™µ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # API-–∫–ª—é—á –¥–ª—è OpenRouter
logging.info(f"üîê TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}, API_KEY: {'–î–∞' if OPENROUTER_API_KEY else '–ù–µ—Ç'}")

# üìç ID Telegram-–≥—Ä—É–ø–ø—ã
GROUP_ID = -1002572659328  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"  # URL –¥–ª—è API OpenRouter

# ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üåê Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app = Flask(__name__)

@app.route('/')
def index():
    logging.debug("üì° –ó–∞–ø—Ä–æ—Å –∫ Flask: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    return "Bot is alive!"

def run_flask():
    logging.info("üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:8080")
    app.run(host="0.0.0.0", port=8080)

# üìö –¢–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
TOPICS = [
    "–ö–∞–∫ –ò–ò –º–µ–Ω—è–µ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å",
    "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–õ—É—á—à–∏–µ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–ø—Ä–µ–ª—è",
    "–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É —Å GPT",
    "–ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç: –±—ã—Å—Ç—Ä–æ, –¥—ë—à–µ–≤–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ"
]
topic_index = 0
rss_index = 0
use_topic = True

# üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def update_user_session(user_id):
    last_interaction[user_id] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    logging.debug(f"‚úÖ –í—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {last_interaction[user_id]}")

# üßπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
async def clean_inactive_sessions():
    while True:
        current_time = time.time()
        for user_id, last_time in list(last_interaction.items()):
            if current_time - last_time > 1800:  # 30 –º–∏–Ω—É—Ç
                del last_interaction[user_id]
                del user_sessions[user_id]
                logging.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# üîò –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
def create_keyboard():
    logging.debug("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ñ –û–±—Å—É–¥–∏—Ç—å —Å AIlex", url="https://t.me/ShilizyakaBot?start=from_post")
    )

# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ RSS-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
async def get_rss_titles():
    RSS_FEED_URL = "https://habr.com/ru/rss/"
    try:
        async with httpx.AsyncClient() as client:
            r = await client.get(RSS_FEED_URL)
            logging.info(f"üì• –ó–∞–ø—Ä–æ—Å RSS: {r.status_code}")
            if r.status_code != 200:
                return []
            root = ET.fromstring(r.text)
            titles = [item.find("title").text for item in root.findall(".//item") if item.find("title") is not None]
            logging.info(f"üìö –ü–æ–ª—É—á–µ–Ω–æ RSS-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(titles)}")
            return titles
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS: {e}")
        return []

# üßº –û—á–∏—Å—Ç–∫–∞ HTML –¥–ª—è Telegram
def clean_html_for_telegram(html: str) -> str:
    allowed_tags = {"b", "strong", "i", "em", "u", "ins", "s", "strike", "del", "code", "pre", "a", "span"}
    soup = BeautifulSoup(html, "html.parser")
    for tag in soup.find_all(True):
        if tag.name not in allowed_tags:
            tag.unwrap()
    cleaned = str(soup)
    logging.debug(f"üßº HTML –æ—á–∏—â–µ–Ω –¥–ª—è Telegram: {cleaned[:80]}...")
    return cleaned

# üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter
async def generate_reply(user_message: list) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }

    SYSTEM_PROMPT = (
        "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫, Telegram-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. "
        "–ü–∏—à–∏ –ø–æ—Å—Ç –∫–∞–∫ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞: —è—Ä–∫–æ, –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
        "–ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç, <i>–∫—É—Ä—Å–∏–≤</i>, —ç–º–æ–¥–∑–∏, —Å–ø–∏—Å–∫–∏. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –ò–ò. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –∫—Ä—É—Ç–æ–π –ø–æ—Å—Ç!"
    )

    payload = {
        "model": "meta-llama/llama-4-maverick",
        "messages": [{"role": "system", "content": SYSTEM_PROMPT}] + user_message
    }
    logging.debug(f"üì¶ Payload –¥–ª—è OpenRouter: {payload}")

    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
            data = r.json()
            if r.status_code == 200 and 'choices' in data:
                response = data['choices'][0]['message']['content']
                response = response.replace("<ul>", "").replace("</ul>", "").replace("<li>", "‚Ä¢ ").replace("</li>", "")
                logging.debug(f"üß† –û—Ç–≤–µ—Ç –æ—Ç OpenRouter: {response[:80]}...")
                return response
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {data}")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    if msg.chat.type == "private":
        logging.info(f"üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
        await msg.reply("–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî AIlex, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# üì• –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def reply_handler(msg: types.Message):
    user_id = msg.from_user.id
    update_user_session(user_id)
    user_text = msg.text.strip()
    logging.info(f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_text}")

    user_sessions[user_id].append({"role": "user", "content": user_text})
    messages = list(user_sessions[user_id])
    logging.debug(f"üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {messages}")

    response = await generate_reply(messages)
    user_sessions[user_id].append({"role": "assistant", "content": response})
    logging.info(f"üì§ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {response[:80]}")

    await msg.reply(clean_html_for_telegram(response), parse_mode=ParseMode.HTML)

# üì¨ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_posting():
    global topic_index, rss_index, use_topic
    while True:
        topic = None
        try:
            logging.info(f"‚ñ∂Ô∏è –¶–∏–∫–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞. use_topic={use_topic}, topic_index={topic_index}, rss_index={rss_index}")
            if use_topic:
                topic = TOPICS[topic_index % len(TOPICS)]
                logging.info(f"üß† –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {topic}")
                topic_index += 1
            else:
                rss_titles = await get_rss_titles()
                if rss_titles:
                    topic = rss_titles[rss_index % len(rss_titles)]
                    logging.info(f"üì∞ RSS —Ç–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {topic}")
                    rss_index += 1
                else:
                    logging.warning("‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ RSS-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.")
            use_topic = not use_topic

            if topic:
                post = await generate_reply([{"role": "user", "content": topic}])
                logging.info(f"üìù –ü–æ—Å—Ç –ø–æ–ª—É—á–µ–Ω: {post[:80]}...")
                if quality_filter(post):
                    await bot.send_message(GROUP_ID, post, reply_markup=create_keyboard(), parse_mode=ParseMode.HTML)
                    logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logging.warning("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞.")
            else:
                logging.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –¥–ª—è –ø–æ—Å—Ç–∞.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

        try:
            delay = 1800  # 30 –º–∏–Ω—É—Ç
            logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ sleep: {e}")
            await asyncio.sleep(1800)

# üîÅ Self-ping
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
                logging.info("üì° Self-ping –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå Self-ping error: {e}")
        await asyncio.sleep(600)

# üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.create_task(clean_inactive_sessions())
    asyncio.create_task(auto_posting())
    asyncio.create_task(self_ping())
    await dp.start_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main())
