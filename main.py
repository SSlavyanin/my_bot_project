import os
import logging
import asyncio
import random
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

# üìå Self-ping —Ñ—É–Ω–∫—Ü–∏—è
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

SYSTEM_PROMPT = "–¢—ã ‚Äî AIlex, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É. –û—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∏–¥–µ—è–º–∏."

# ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter
async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "ShelezyakaBot"
    }
    payload = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
        data = response.json()
        if "choices" not in data:
            logging.error(f"OpenRouter API error: {data}")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return data['choices'][0]['message']['content']

# üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=["id"])
async def send_chat_id(message: types.Message):
    await message.reply(f"Chat ID: {message.chat.id}")

@dp.message_handler(commands=["start_posts"])
async def start_posts(message: types.Message):
    await message.reply("AIlex –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥!")
    asyncio.create_task(auto_post())

# üîÅ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É
GROUP_ID = -1002572659328
POST_INTERVAL = 2.5 * 60 * 60  # 2.5 —á–∞—Å–∞

POST_TOPICS = [
    "–ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏",
    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
    "–ò–¥–µ–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò",
    "AI –≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ",
    "–ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂",
    "AI –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
    "–ü—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥",
    "AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–∞",
    "AI –∏ —É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
    "–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏"
]

async def auto_post():
    for topic in POST_TOPICS:
        try:
            await bot.send_message(GROUP_ID, f"ü§ñ {topic}")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç: {topic}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
        await asyncio.sleep(random.randint(10, 20))  # –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in message.text:
            user_msg = message.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            reply = await generate_reply(user_msg)
            await message.reply(reply)
    else:
        reply = await generate_reply(message.text)
        await message.reply(reply)

# üöÄ –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞
if __name__ == "__main__":
    def run_flask():
        app.run(host='0.0.0.0', port=8080)

    Thread(target=run_flask).start()

    loop = asyncio.get_event_loop()
    loop.create_task(self_ping())  # –∑–∞–ø—É—Å–∫–∞–µ–º self-ping
    executor.start_polling(dp, skip_updates=True)
