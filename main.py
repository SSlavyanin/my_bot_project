import os
import logging
import asyncio
import random
from flask import Flask
from threading import Thread
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.dispatcher.filters import CommandStart

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞
GROUP_ID = -1002572659328
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# üåê Flask (–ø–∏–Ω–≥ Render)
app = Flask(__name__)
@app.route('/')
def index():
    return "Bot is alive!"

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# üí° –ü–æ—Å—Ç–∏–Ω–≥
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫, Telegram-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. "
    "–ü–∏—à–∏ –ø–æ—Å—Ç –∫–∞–∫ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞: —è—Ä–∫–æ, –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
    "–ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç, <i>–∫—É—Ä—Å–∏–≤</i>, —ç–º–æ–¥–∑–∏, —Å–ø–∏—Å–∫–∏. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –ò–ò. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –∫—Ä—É—Ç–æ–π –ø–æ—Å—Ç!"
)

TOPICS = [
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–ò–¥–µ–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —Å AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
    "–ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å 10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å –ø–æ–º–æ—â—å—é ChatGPT?",
    "–ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî AI-–æ–ø–µ—Ä–∞—Ç–æ—Ä. –ß—Ç–æ —ç—Ç–æ?",
]

def create_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ñ –û–±—Å—É–¥–∏—Ç—å —Å AIlex", url="https://t.me/ShilizyakaBot?start=from_post")
    )

async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }
    payload = {
        "model": "meta-llama/llama-4-maverick",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    async with httpx.AsyncClient() as client:
        r = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
        data = r.json()
        return data['choices'][0]['message']['content'] if 'choices' in data else "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

def quality_filter(text: str) -> bool:
    if len(text.split()) < 20: return False
    if any(x in text.lower() for x in ["–∏–∑–≤–∏–Ω", "–Ω–µ –º–æ–≥—É", "–∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ"]): return False
    return True

async def auto_posting():
    while True:
        topic = random.choice(TOPICS)
        try:
            post = await generate_reply(topic)
            if quality_filter(post):
                await bot.send_message(GROUP_ID, post, reply_markup=create_keyboard(), parse_mode=ParseMode.HTML)
                logging.info("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logging.info("‚ùå –ü–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(60 * 60 * 2.5)  # –∫–∞–∂–¥—ã–µ 2.5 —á–∞—Å–∞

async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# üì© –õ–∏—á–∫–∞ + —á–∞—Ç
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    if msg.chat.type == "private":
        await msg.reply("üëã –ü—Ä–∏–≤–µ—Ç, —è AIlex. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏!")

@dp.message_handler()
async def reply_handler(msg: types.Message):
    if msg.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in msg.text:
            cleaned = msg.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            response = await generate_reply(cleaned)
            await msg.reply(response, parse_mode=ParseMode.HTML)
    else:
        response = await generate_reply(msg.text)
        await msg.reply(response, parse_mode=ParseMode.HTML)

# üîÑ –í—Å—ë –≤–º–µ—Å—Ç–µ
async def main():
    asyncio.create_task(self_ping())
    asyncio.create_task(auto_posting())
    await dp.start_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main())
