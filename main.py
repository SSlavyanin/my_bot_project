import logging
import asyncio
import random
import httpx
import feedparser
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from flask import Flask
from threading import Thread
import os

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROUP_ID = -1002572659328

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ aiogram)
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")  # Aiogram bot
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render self-ping
app = Flask(__name__)

@app.route('/')
def home():
    return "AIlex is alive"

def run_flask():
    app.run(host='0.0.0.0', port=10000)

# Self-ping Render
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# –ö–Ω–æ–ø–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
def create_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", url="https://t.me/c/2572659328")]
    ])
    return keyboard

# –§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π)
def quality_filter(post: str) -> bool:
    return len(post) > 100 and "–ò–ò" in post

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ RSS
topics = []

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º –∏–∑ RSS
async def fetch_topics_from_rss():
    global topics
    topics = []
    feed_urls = [
        "https://neurohype.tech/rss",
        "https://ain.ua/feed/",
        "https://thereisno.ai/feed"
    ]
    for url in feed_urls:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            title = entry.get("title", "")
            if any(word in title for word in ["–ò–ò", "AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"]):
                topics.append(title)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async def generate_reply(topic: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": "meta-llama/llama-4-maverick:free",
        "messages": [
            {"role": "system", "content": "–¢—ã –Ω–µ–π—Ä–æ—á–µ–ª AIlex ‚Äî –≥–æ–≤–æ—Ä–∏—à—å —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∏–¥–µ—è–º–∏. –ü–∏—à–µ—à—å –ø–æ—Å—Ç—ã –ø—Ä–æ –ò–ò, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, –∑–∞—Ä–∞–±–æ—Ç–æ–∫. –ù–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–¥ –∑–∞–¥–∞—á—É."},
            {"role": "user", "content": f"{topic}"}
        ]
    }
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload
            )
            data = response.json()
            if "choices" in data:
                return data["choices"][0]["message"]["content"].strip()
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data}")
                return ""
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ): {e}")
        return ""

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_posting():
    global topics
    await fetch_topics_from_rss()
    while True:
        if topics:
            topic = random.choice(topics)
            try:
                post = await generate_reply(f"{topic}. –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ AIlex. –£–ø–æ–º—è–Ω–∏, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.")
                if quality_filter(post):
                    await bot.send_message(GROUP_ID, post, reply_markup=create_keyboard())
                    logging.info("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    logging.info("‚ùå –ü–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞.")
        await asyncio.sleep(60 * 60 * 2.5)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.id == GROUP_ID and message.reply_to_message:
        prompt = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}\n–û—Ç–≤–µ—Ç—å –æ—Ç –∏–º–µ–Ω–∏ AIlex ‚Äî —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –∫–∞–∫ –Ω–µ–π—Ä–æ—á–µ–ª."
        reply = await generate_reply(prompt)
        if reply:
            await message.reply(reply)

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    Thread(target=run_flask).start()
    asyncio.create_task(self_ping())
    asyncio.create_task(auto_posting())
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
