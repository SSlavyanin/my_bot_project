import os
import logging
import asyncio
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx
import random
from datetime import datetime

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"
TARGET_CHAT_ID = -1002572659328

# üåê Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

# üîÅ Self-ping
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# ü§ñ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

SYSTEM_PROMPT = "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫. –ü–∏—à–∏ –∂–∏–≤–æ, –ª–µ–≥–∫–æ, —É–º–Ω–æ. –ö—Ä–∞—Ç–∫–æ, —Å –∏–¥–µ—è–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏. –ë–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞. –°—Ç–∏–ª—å –±–ª–∏–∂–µ –∫ Telegram, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–ª–µ–Ω–≥, –ø—Ä–∏–º–µ—Ä—ã, —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."

TOPICS = [
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
    "–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ò–ò?",
    "–ò–¥–µ–∏ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —Å –ò–ò",
    "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –±–∏–∑–Ω–µ—Å—É —Ä–∞—Å—Ç–∏?",
    "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Ñ—Ä–∏–ª–∞–Ω—Å–µ: —á—Ç–æ —É–º–µ—é—Ç –∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å?",
    "–ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö",
    "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–µ–±—è?",
    "10 –∏–¥–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å ChatGPT",
    "–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ò–ò –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
]

# ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }
    payload = {
        "model": "openchat/openchat-3.5:free",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
        data = response.json()
        if "choices" not in data:
            logging.error(f"OpenRouter API error: {data}")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return data['choices'][0]['message']['content']

# üí¨ –û—Ç–≤–µ—Ç—ã –≤ —á–∞—Ç–µ
@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in message.text:
            user_msg = message.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            reply = await generate_reply(user_msg)
            await message.reply(reply)
    else:
        reply = await generate_reply(message.text)
        await message.reply(reply)

# üì£ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def autopost_loop():
    while True:
        try:
            topic = random.choice(TOPICS)
            post = await generate_reply(topic)
            timestamp = datetime.now().strftime("%H:%M")
            await bot.send_message(TARGET_CHAT_ID, f"{post}\n\nüïí {timestamp}")
            logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
        await asyncio.sleep(60 * 60 * 2.5)  # –∫–∞–∂–¥—ã–µ 2.5 —á–∞—Å–∞

@dp.message_handler(commands=['start_posts'])
async def start_posts(message: types.Message):
    asyncio.create_task(autopost_loop())
    await message.reply("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")

# üöÄ –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    def run_flask():
        app.run(host='0.0.0.0', port=8080)

    Thread(target=run_flask).start()

    loop = asyncio.get_event_loop()
    loop.create_task(self_ping())
    executor.start_polling(dp, skip_updates=True)
