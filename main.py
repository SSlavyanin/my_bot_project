import os
import logging
import asyncio
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx
import random
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ParseMode

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

# üìå Self-ping —Ñ—É–Ω–∫—Ü–∏—è
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üéØ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø–æ–¥ LLaMA 4 Maverick
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫. –û–±—â–∞–π—Å—è –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏: –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ. "
    "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—Ç–∏, —Å –∏–¥–µ—è–º–∏ –∏ —Ñ–∏—à–∫–∞–º–∏, –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è –æ–ø—ã—Ç–æ–º. "
    "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–Ω–≥, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∑–∞–¥–∞–≤–∞—Ç—å —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∫–∞–∫ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö –ø—Ä–æ –ò–ò –∏ –∑–∞—Ä–∞–±–æ—Ç–æ–∫."
)

TOPICS = [
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–ò–¥–µ–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —Å AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
    "–¢–æ–ø-3 —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ò–ò –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤",
    "–ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å 10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å –ø–æ–º–æ—â—å—é ChatGPT?",
    "–ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî AI-–æ–ø–µ—Ä–∞—Ç–æ—Ä. –ß—Ç–æ —ç—Ç–æ?",
    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–æ–≤",
    "–ö–∞–∫ –±–∏–∑–Ω–µ—Å—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
    "–ü–æ—á–µ–º—É –Ω–µ –ø–æ–∑–¥–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ AI –≤ 2025?",
    "–ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É –Ω–∞ –±–∞–∑–µ –ò–ò –∑–∞ 1 –≤–µ—á–µ—Ä"
]

GROUP_ID = -1002572659328

# ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }
    payload = {
        "model": "meta-llama/llama-4-maverick",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
        data = response.json()
        if "choices" not in data:
            logging.error(f"OpenRouter API error: {data}")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return data['choices'][0]['message']['content']

# ‚úÖ –§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞
def quality_filter(text: str) -> bool:
    if len(text.split()) < 20:
        return False
    if any(word in text.lower() for word in ["–∏–∑–≤–∏–Ω", "—è –Ω–µ –º–æ–≥—É", "–∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ"]):
        return False
    if text.count("\n") < 1 and len(text) > 400:
        return False
    return True

# ü™Ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
async def auto_posting():
    while True:
        topic = random.choice(TOPICS)
        try:
            post = await generate_reply(topic)
            if quality_filter(post):
                await post_with_button(post)
                logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                logging.info("–ü–æ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
        await asyncio.sleep(60 * 60 * 2.5)

# üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
def create_post_keyboard():
    chat_link = "https://t.me/ShilizyakaBot?start=from_post"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username –±–æ—Ç–∞
    button = InlineKeyboardButton(text="–û–±—Å—É–¥–∏—Ç—å —Å –±–æ—Ç–æ–º", url=chat_link)
    keyboard = InlineKeyboardMarkup(row_width=1).add(button)
    return keyboard

# üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
async def post_with_button(post_text: str):
    keyboard = create_post_keyboard()
    await bot.send_message(chat_id=GROUP_ID, text=post_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.message_handler(commands=["start_posts"])
async def start_posts(message: types.Message):
    async def safe_auto_posting():
        try:
            await auto_posting()
        except Exception as e:
            logging.error(f"Autoposting task crashed: {e}")
    asyncio.create_task(safe_auto_posting())
    await message.reply("üöÄ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")

@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in message.text:
            user_msg = message.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            reply = await generate_reply(user_msg)
            await message.reply(reply)
    else:
        reply = await generate_reply(message.text)
        await message.reply(reply)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    def run_flask():
        app.run(host='0.0.0.0', port=8080)

    Thread(target=run_flask).start()
    loop = asyncio.get_event_loop()
    loop.create_task(self_ping())
    executor.start_polling(dp, skip_updates=True)
