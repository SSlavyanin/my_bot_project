import os
import logging
import asyncio
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx
import random

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

# üìå Self-ping
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

GROUP_ID = -1002572659328
SYSTEM_PROMPT = "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫. –ü–∏—à–∏ –∂–∏–≤–æ, –ª–µ–≥–∫–æ, —É–º–Ω–æ. –ö—Ä–∞—Ç–∫–æ, —Å –∏–¥–µ—è–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏. –ë–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞. –°—Ç–∏–ª—å –±–ª–∏–∂–µ –∫ Telegram, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–ª–µ–Ω–≥, –ø—Ä–∏–º–µ—Ä—ã, —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."

# ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
async def generate_post():
    themes = [
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏",
        "–ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
        "–ò–¥–µ–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —Å –ò–ò",
        "–ë–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: –∑–∞—á–µ–º –∏ –∫–∞–∫",
        "–ò–ò –∫–∞–∫ –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ñ—Ä–∏–ª–∞–Ω—Å–µ",
        "5 AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—ç–∫–æ–Ω–æ–º—è—Ç —Ç–µ–±–µ –≤—Ä–µ–º—è",
        "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ AI-–∑–∞—Ä–∞–±–æ—Ç–∫–µ",
        "–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–≤–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –ø–æ –±–∏–∑–Ω–µ—Å—É",
        "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å ChatGPT",
        "–ò–ò –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: –∫–∞–Ω–∞–ª—ã, –±–æ—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    ]
    theme = random.choice(themes)
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }
    payload = {
        "model": "deepseek/deepseek-r1:free",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –≤ Telegram –Ω–∞ —Ç–µ–º—É: {theme}. –°—Ç–∏–ª—å ‚Äî –Ω–µ–π—Ä–æ—á–µ–ª, –∏–¥–µ–∏, –∫—Ä–∞—Ç–∫–æ—Å—Ç—å, –ø–æ–ª—å–∑–∞."}
        ]
    }
    async with httpx.AsyncClient() as client:
        try:
            res = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
            data = res.json()
            return data['choices'][0]['message']['content']
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return None

# ‚è±Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_poster():
    while True:
        post = await generate_post()
        if post:
            try:
                await bot.send_message(chat_id=GROUP_ID, text=post)
                logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
        await asyncio.sleep(3600 + random.randint(60, 300))  # ~1 —á–∞—Å –∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands=["start_posts"])
async def cmd_start(message: types.Message):
    if str(message.chat.id) == str(GROUP
