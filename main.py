import os
import logging
import asyncio
import random
from flask import Flask
from threading import Thread
import httpx
import xml.etree.ElementTree as ET
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from bs4 import BeautifulSoup

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# üìç ID Telegram-–≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
GROUP_ID = -1002572659328
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ aiogram –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# üåê Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
@app.route('/')
def index():
    return "Bot is alive!"
def run_flask():
    app.run(host="0.0.0.0", port=8080)

# üìö –¢–µ–º—ã
TOPICS = [
    "–ö–∞–∫ –ò–ò –º–µ–Ω—è–µ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å",
    "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–õ—É—á—à–∏–µ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–ø—Ä–µ–ª—è",
    "–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É —Å GPT",
    "–ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç: –±—ã—Å—Ç—Ä–æ, –¥—ë—à–µ–≤–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ"
]
topic_index = 0
rss_index = 0
use_topic = True

# üîò –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
def create_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ñ –û–±—Å—É–¥–∏—Ç—å —Å AIlex", url="https://t.me/ShilizyakaBot?start=from_post")
    )

# üì° RSS
async def get_rss_titles():
    RSS_FEED_URL = "https://habr.com/ru/rss/"
    try:
        async with httpx.AsyncClient() as client:
            r = await client.get(RSS_FEED_URL)
            if r.status_code != 200:
                return []
            root = ET.fromstring(r.text)
            return [item.find("title").text for item in root.findall(".//item") if item.find("title") is not None]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS: {e}")
        return []

# üîé HTML —Ñ–∏–ª—å—Ç—Ä
def clean_html_for_telegram(html: str) -> str:
    allowed_tags = {"b", "strong", "i", "em", "u", "ins", "s", "strike", "del", "code", "pre", "a", "span"}
    soup = BeautifulSoup(html, "html.parser")
    for tag in soup.find_all(True):
        if tag.name not in allowed_tags:
            tag.unwrap()
    return str(soup)

# ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
async def generate_reply(user_message: str, message: types.Message) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }

    SYSTEM_PROMPT = (
        "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫, Telegram-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. "
        "–ü–∏—à–∏ –ø–æ—Å—Ç –∫–∞–∫ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞: —è—Ä–∫–æ, –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
        "–ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç, <i>–∫—É—Ä—Å–∏–≤</i>, —ç–º–æ–¥–∑–∏, —Å–ø–∏—Å–∫–∏. "
        "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –ò–ò. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –∫—Ä—É—Ç–æ–π –ø–æ—Å—Ç!"
    )

    payload = {
        "model": "meta-llama/llama-4-maverick",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }

    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
            data = r.json()
            if r.status_code == 200 and 'choices' in data:
                response = data['choices'][0]['message']['content']
                response = response.replace("<ul>", "").replace("</ul>", "").replace("<li>", "‚Ä¢ ").replace("</li>", "")
                return response
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data}")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

# ‚úÖ –§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞
def quality_filter(text: str) -> bool:
    if len(text.split()) < 20: return False
    if any(x in text.lower() for x in ["–∏–∑–≤–∏–Ω", "–Ω–µ –º–æ–≥—É", "–∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ"]): return False
    return True

# üì¨ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
async def auto_posting():
    global topic_index, rss_index, use_topic
    while True:
        topic = None
        if use_topic:
            topic = TOPICS[topic_index % len(TOPICS)]
            topic_index += 1
        else:
            rss_titles = await get_rss_titles()
            if rss_titles:
                topic = rss_titles[rss_index % len(rss_titles)]
                rss_index += 1
        use_topic = not use_topic

        if topic:
            try:
                dummy_message = types.Message(message_id=0, date=None,
                    chat=types.Chat(id=0, type="private"),
                    from_user=types.User(id=0, is_bot=False, first_name="AIlex"),
                    text=topic)
                post = await generate_reply(topic, message=dummy_message)
                if quality_filter(post):
                    await bot.send_message(GROUP_ID, post, reply_markup=create_keyboard(), parse_mode=ParseMode.HTML)
                    logging.info(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {topic}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(60 * 30)

# üîÅ Self-ping
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# /start
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    if msg.chat.type == "private":
        await msg.reply("–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî AIlex, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def reply_handler(msg: types.Message):
    user_text = msg.text.strip()
    if msg.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in msg.text:
            cleaned = msg.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            response = await generate_reply(cleaned, message=msg)
            await msg.reply(clean_html_for_telegram(response), parse_mode=ParseMode.HTML)
        return

    response = await generate_reply(msg.text, message=msg)
    await msg.reply(clean_html_for_telegram(response), parse_mode=ParseMode.HTML)

# üöÄ –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(self_ping())
    asyncio.create_task(auto_posting())
    await dp.start_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main())
