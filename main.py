import os
import logging
import asyncio
import random
from flask import Flask
from threading import Thread
import httpx
import xml.etree.ElementTree as ET
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.dispatcher.filters import CommandStart

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TOOLS_URL = os.getenv("TOOLS_URL")
AILEX_SHARED_SECRET = os.getenv("AILEX_SHARED_SECRET")

# üìç ID Telegram-–≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
GROUP_ID = -1002572659328
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# üåê Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–∏–Ω–≥–∞ Render
app = Flask(__name__)
@app.route('/')
def index():
    return "Bot is alive!"
def run_flask():
    app.run(host="0.0.0.0", port=8080)

# üìö –¢–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
TOPICS = [
    "–ö–∞–∫ –ò–ò –º–µ–Ω—è–µ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å",
    "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–õ—É—á—à–∏–µ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–ø—Ä–µ–ª—è",
    "–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É —Å GPT",
    "–ò–ò-–∫–æ–Ω—Ç–µ–Ω—Ç: –±—ã—Å—Ç—Ä–æ, –¥—ë—à–µ–≤–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ"
]
topic_index = 0
rss_index = 0
use_topic = True  # –§–ª–∞–≥ –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —Ç–µ–º –∏ RSS

# üìå –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫, Telegram-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. "
    "–ü–∏—à–∏ –ø–æ—Å—Ç –∫–∞–∫ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞: —è—Ä–∫–æ, –∂–∏–≤–æ, —Å —é–º–æ—Ä–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
    "–ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b> —Ç–µ–∫—Å—Ç, <i>–∫—É—Ä—Å–∏–≤</i>, —ç–º–æ–¥–∑–∏, —Å–ø–∏—Å–∫–∏. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –ò–ò. –ü—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –∫—Ä—É—Ç–æ–π –ø–æ—Å—Ç!"
)

# üîò –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏
def create_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ñ –û–±—Å—É–¥–∏—Ç—å —Å AIlex", url="https://t.me/ShilizyakaBot?start=from_post")
    )

# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ RSS (–Ω–∞–ø—Ä–∏–º–µ—Ä, habr.com)
async def get_rss_titles():
    RSS_FEED_URL = "https://habr.com/ru/rss/"
    try:
        async with httpx.AsyncClient() as client:
            r = await client.get(RSS_FEED_URL, follow_redirects=True)
            if r.status_code != 200:
                return []
            root = ET.fromstring(r.text)
            return [item.find("title").text for item in root.findall(".//item") if item.find("title") is not None]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS: {e}")
        return []

# ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API
async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "AIlexBot"
    }
    payload = {
        "model": "meta-llama/llama-4-maverick",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
            data = r.json()
            if r.status_code == 200 and 'choices' in data:
                response = data['choices'][0]['message']['content']
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
                response = response.replace("<ul>", "").replace("</ul>", "").replace("<li>", "‚Ä¢ ").replace("</li>", "")
                return response
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data}")
                return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

# üß∞ –ó–∞–ø—Ä–æ—Å –∫ —Ç—É–ª—Å-–±–æ—Ç—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
async def request_tool_from_service(task: str, params: dict, message: types.Message) -> str:
    user_id = str(message.from_user.id)
    try:
        headers = {
            "Content-Type": "application/json",
            "Ailex-Shared-Secret": AILEX_SHARED_SECRET
        }
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{TOOLS_URL}/generate_tool",
                json={"user_id": user_id, "task": task, "params": params},
                headers=headers
            )
            response.raise_for_status()
            result = response.json()
            logging.info(f"[TOOL RESPONSE] –û—Ç–≤–µ—Ç –æ—Ç —Ç—É–ª—Å–∞: {result}")

            if result.get("status") == "ask":
                return f"‚ùì {result.get('message')}"
            elif result.get("status") == "found":
                tools = "\n".join([f"‚Ä¢ <b>{tool['name']}</b>: {tool['description']}" for tool in result.get("tools", [])])
                return f"üîé –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n{tools}\n\n–•–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö?"
            elif "result" in result:
                return f"{result['result']} \n\n<i>(—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç—É–ª—Å-–±–æ—Ç–æ–º)</i>"
            else:
                return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç—É–ª—Å-–±–æ—Ç–∞"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç—É–ª—Å: {e}")
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç—É–ª—Å-–±–æ—Ç—É: {str(e)}"

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π)
def quality_filter(text: str) -> bool:
    if len(text.split()) < 20: return False
    if any(x in text.lower() for x in ["–∏–∑–≤–∏–Ω", "–Ω–µ –º–æ–≥—É", "–∫–∞–∫ –∏ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ"]): return False
    return True

# üì¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–æ—Å—Ç–∏–Ω–≥ –≤ Telegram-–≥—Ä—É–ø–ø—É
async def auto_posting():
    global topic_index, rss_index, use_topic
    while True:
        topic = None
        if use_topic:
            if topic_index < len(TOPICS):
                topic = TOPICS[topic_index]
                topic_index += 1
            else:
                topic_index = 0
        else:
            rss_titles = await get_rss_titles()
            if rss_titles:
                if rss_index >= len(rss_titles):
                    rss_index = 0
                topic = rss_titles[rss_index]
                rss_index += 1
        use_topic = not use_topic

        if topic:
            try:
                post = await generate_reply(topic)
                post = post.replace("<ul>", "").replace("</ul>", "").replace("<li>", "‚Ä¢ ").replace("</li>", "")
                if quality_filter(post):
                    await bot.send_message(GROUP_ID, post, reply_markup=create_keyboard(), parse_mode=ParseMode.HTML)
                    logging.info(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {topic}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(60 * 30)

# üîÅ Self-ping Render –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

# üßæ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(msg: types.Message):
    if msg.chat.type == "private":
        await msg.reply("–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî AIlex, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ò–ò –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def reply_handler(msg: types.Message):
    if msg.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in msg.text:
            cleaned = msg.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            response = await generate_reply(cleaned)
            await msg.reply(response, parse_mode=ParseMode.HTML)
    else:
        user_text = msg.text.strip().lower()

        # üëÄ –ü—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if any(x in user_text for x in ["—Å–¥–µ–ª–∞–π", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–±–æ—Ç", "—É—Ç–∏–ª–∏—Ç–∞"]):
            response = await request_tool_from_service(task=user_text, params={}, message=msg)
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(f"[AILEX] –û—Ç–≤–µ—Ç –¥–ª—è {msg.from_user.id}: {response[:100]}")
        else:
            response = await generate_reply(msg.text)

        await msg.reply(response, parse_mode=ParseMode.HTML)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(self_ping())
    asyncio.create_task(auto_posting())
    await dp.start_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main())
