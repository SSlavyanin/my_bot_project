import os
import logging
import asyncio
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx
import random
import time

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENAI_BASE_URL = "https://openrouter.ai/api/v1"

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

# üìå Self-ping —Ñ—É–Ω–∫—Ü–∏—è
async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

# ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

SYSTEM_PROMPT = "–¢—ã ‚Äî AIlex, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ AI-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É. –û—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –∏–¥–µ—è–º–∏."

# ‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter
async def generate_reply(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π
        "X-Title": "ShelezyakaBot"
    }
    payload = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": user_message}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{OPENAI_BASE_URL}/chat/completions", json=payload, headers=headers)
        data = response.json()
        if "choices" not in data:
            logging.error(f"OpenRouter API error: {data}")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        return data['choices'][0]['message']['content']

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in message.text:
            user_msg = message.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            reply = await generate_reply(user_msg)
            await message.reply(reply)
    else:
        reply = await generate_reply(message.text)
        await message.reply(reply)

# üìÖ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
async def auto_post():
    group_id = 2572659328
    topics = [
        "–ö–∞–∫ –ò–ò –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã.",
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.",
        "–ò–¥–µ–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é AI: –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.",
        "–ö–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ.",
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –±–∏–∑–Ω–µ—Å–µ.",
        "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: –æ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤.",
        "–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –≤ –±—É–¥—É—â–µ–º.",
        "–ò–¥–µ–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
        "–ö–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        "–ö–∞–∫ AI –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏."
    ]
    
    while True:
        message = random.choice(topics)
        try:
            await bot.send_message(group_id, message)
            logging.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç: '{message}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
            await asyncio.sleep(9000)  # –ü–∞—É–∑–∞ 2.5 —á–∞—Å–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ Flask –∏ –±–æ—Ç–∞
if __name__ == "__main__":
    def run_flask():
        app.run(host='0.0.0.0', port=8080)

    Thread(target=run_flask).start()

    loop = asyncio.get_event_loop()
    loop.create_task(self_ping())  # –∑–∞–ø—É—Å–∫–∞–µ–º self-ping
    loop.create_task(auto_post())  # –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—é
    executor.start_polling(dp, skip_updates=True)
