import os
import logging
import asyncio
import random
from threading import Thread
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import httpx

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROUP_ID = -1002572659328  # ID Telegram-–≥—Ä—É–ø–ø—ã
POST_INTERVAL = 9000  # 2.5 —á–∞—Å–∞

OPENROUTER_API_URL = "https://openrouter.ai/api/v1"

app = Flask(__name__)

@app.route('/')
def home():
    return 'Bot is alive!'

async def self_ping():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://my-bot-project-8wit.onrender.com/")
            logging.info("Self-ping sent.")
        except Exception as e:
            logging.error(f"Self-ping error: {e}")
        await asyncio.sleep(600)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî AIlex, –Ω–µ–π—Ä–æ—á–µ–ª–æ–≤–µ–∫. –ü–∏—à–∏ –∂–∏–≤–æ, –ª–µ–≥–∫–æ, —É–º–Ω–æ. "
    "–ö—Ä–∞—Ç–∫–æ, —Å –∏–¥–µ—è–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏. "
    "–ë–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞. –°—Ç–∏–ª—å –±–ª–∏–∂–µ –∫ Telegram, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–ª–µ–Ω–≥, –ø—Ä–∏–º–µ—Ä—ã, —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
)

TOPICS = [
    "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏?",
    "–ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
    "–ò–¥–µ–∏ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ —Å AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
    "–¢–æ–ø-3 —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ò–ò –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤",
    "–ö–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å 10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é —Å –ø–æ–º–æ—â—å—é ChatGPT?",
    "–ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è ‚Äî AI-–æ–ø–µ—Ä–∞—Ç–æ—Ä. –ß—Ç–æ —ç—Ç–æ?",
    "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–æ–≤",
    "–ö–∞–∫ –±–∏–∑–Ω–µ—Å—É –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
    "–ü–æ—á–µ–º—É –Ω–µ –ø–æ–∑–¥–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ AI –≤ 2025?",
    "–ö–∞–∫ —Å–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É –Ω–∞ –±–∞–∑–µ –ò–ò –∑–∞ 1 –≤–µ—á–µ—Ä"
]

async def generate_post(topic: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/YOUR_CHANNEL_NAME",
        "X-Title": "ShelezyakaBot"
    }
    payload = {
        "model": "nousresearch/nous-capybara-7b",
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, —É–º–Ω—ã–π Telegram-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}"}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(OPENROUTER_API_URL + "/chat/completions", json=payload, headers=headers)
        data = response.json()
        if "choices" not in data:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {data}")
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç."
        return data["choices"][0]["message"]["content"]

async def auto_posting():
    while True:
        topic = random.choice(TOPICS)
        post = await generate_post(topic)
        try:
            await bot.send_message(GROUP_ID, post)
            logging.info("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
        await asyncio.sleep(POST_INTERVAL)

@dp.message_handler(commands=["start_posts"])
async def start_posts(message: types.Message):
    await message.reply("üöÄ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
    asyncio.create_task(auto_posting())

@dp.message_handler()
async def handle_message(message: types.Message):
    if message.chat.type in ["group", "supergroup"]:
        if f"@{(await bot.get_me()).username}" in message.text:
            user_msg = message.text.replace(f"@{(await bot.get_me()).username}", "").strip()
            reply = await generate_post(user_msg)
            await message.reply(reply)
    else:
        reply = await generate_post(message.text)
        await message.reply(reply)

if __name__ == "__main__":
    def run_flask():
        app.run(host='0.0.0.0', port=8080)

    Thread(target=run_flask).start()
    loop = asyncio.get_event_loop()
    loop.create_task(self_ping())
    executor.start_polling(dp, skip_updates=True)
